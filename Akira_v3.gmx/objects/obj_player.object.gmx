<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state=0;
move_speed=4;
size=384;
image_speed=0;
image_index=global.player_default;
walk_frame=8;
i=0;
inst=instance_nearest(x,y,obj_interact);
weapon_drawn=global.weapon_drawn;
instance_create(x,y-102,obj_player_arms);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_blend_mode(bm_subtract);
surface_set_target(global.light);
draw_ellipse_color(x-size/2 - view_xview[0],y-size/2 - view_yview[0],x+size/2 - view_xview[0], y+size/2 - view_yview[0],c_white,c_black,false);
surface_reset_target();
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(global.pause==0)
{
    if(global.player_health&lt;=0)
    {
        if(state!=1)
        {
            state=10;
        }
    }
    //The player uses a state based approach for controlling actions.
    //state 0 is awaiting input
    switch(state)
    {
        case 0:
        {
            i=0;
            if(weapon_drawn==false)
            {
                //A or left arrow to move left
                if(max(keyboard_check(ord("A")),keyboard_check(vk_left),0))
                {
                    //move left
                    image_index=3;
                    state=2;
                }
                //D or right arrow to move right
                else if(max(keyboard_check(ord("D")),keyboard_check(vk_right),0))
                {
                    //move right
                    image_index=1;
                    state=3;
                }
                //W or S or up arrow or down arrow to interact with an object
                else if(max(keyboard_check_released(ord("W")),keyboard_check_released(vk_up),keyboard_check_released(ord("S")),keyboard_check_released(vk_down), keyboard_check_released(vk_space),0))
                {
                    //interact
                    state=4;
                }
                //shift to draw your weapon
                else if(max(keyboard_check_released(vk_shift),0))
                {
                    //draw your weapon
                    state=5;
                }
                //M? to use a medkit
                else if(max(keyboard_check_released(ord("M")),0))
                {
                    scr_use_medkit();
                }
                //R? to reload
                else if(max(keyboard_check_released(ord("R")),0))
                {
                    //scr_reload();
                }
            }
            else
            {
                //A or left arrow to move left
                if(max(keyboard_check(ord("A")),keyboard_check(vk_left),0))
                {
                    //move left
                    image_index=3;
                    state=6;
                }
                //D or right arrow to move right
                else if(max(keyboard_check(ord("D")),keyboard_check(vk_right),0))
                {
                    //move right
                    image_index=1;
                    state=7;
                }
                //W or S or up arrow or down arrow to interact with an object
                else if(max(keyboard_check_released(ord("W")),keyboard_check_released(vk_up),keyboard_check_released(ord("S")),keyboard_check_released(vk_down),0))
                {
                    //interact
                    state=4;
                }
                //space to fire your weapon
                else if(max(keyboard_check_released(vk_space),0))
                {
                    //fire weapon
                    state=8;
                }
                //shift to holster your weapon
                else if(max(keyboard_check_released(vk_shift),0))
                {
                    //holster your weapon
                    state=9;
                }
                //M? to use a medkit
                else if(max(keyboard_check_released(ord("M")),0))
                {
                    scr_use_medkit();
                }
                //R? to reload
                else if(max(keyboard_check_released(ord("R")),0))
                {
                    //scr_reload();
                }
            }
            break;
        }
        //state 1 is a pause state during which the player has no control.
        //it does nothing and has no escape within it.
        case 1:
        {
            break;
        }
        //case 2 is for moving left
        case 2:
        {
            scr_move_left();
            break;
        }
        //case 3 is for moving right
        case 3:
        {
            scr_move_right();
            break;
        }
        //case 4 is for interacting with objects (ammo, doors, keys, medkits, and terminals.)
        case 4:
        {
            scr_interact();
            break;
        }
        case 5:
        {
            //ready weapon
            weapon_drawn=true;
            state=0; 
            with(obj_player_arms)
                {
                    if(image_index==2)
                    {
                        image_index=3;
                    }
                    else if(image_index==0)
                    {
                        image_index=1;
                    }
                }
            break;
        }
        //case 6 is for moving left with weapon drawn
        case 6:
        {
            scr_move_left_drawn();
            break;
        }
        //case 7 is for moving right with weapon drawn
        case 7:
        {
            scr_move_right_drawn();
            break;
        }
        case 8:
        {
            scr_fire_weapon();
            state=0;
            break;
        }
        case 9:
        {
            //relax weapon
            weapon_drawn=false;
            state=0;
            with(obj_player_arms)
                    {
                        if(image_index==3)
                        {
                            image_index=2;
                        }
                        else if(image_index==1)
                        {
                            image_index=0;
                        }
                    }
            break;
        }
        
        
        case 10:
        {
            //death
            player_health=0;
            /*
            if(image_index==0 || image_index==1 || image_index==6)
            {
                image_index=4;
            }
            else
            {
                image_index=5;
            }
            */
            with(obj_display)
            {
                global.message_display=9;
                alarm[0]=1;
            }
            alarm[0]=room_speed*3;
            state=1;
            break;
        }
        
        
        //default state, because all good switch statements have one
        default:
        {
        break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
