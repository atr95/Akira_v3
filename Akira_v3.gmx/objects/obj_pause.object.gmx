<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.pause=0;
pause_game=0;
unpause_game=0;


//Menu Options
menu[0]="Unpause";
menu[1]="Exit Game";

//Menu Variables
menu_length=array_length_1d(menu);//This dynamically matches the amount of menu options
space = 32;//default spacing value used for drawing boxes
menu_position=0;//default position
l=0; //Longest pixel width amongst menu options
//This is needed to determine how wide the menu should be.
for(i=0; i&lt;array_length_1d(menu); i += 1)
{
    if(string_width(string(menu[i]))&gt;l)
    {
        l=string_width(string(menu[i]));
    }
}

//Button variables

move = 0;
push = 0;
push_end = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(pause_game==0)
{
    pause_game = max(keyboard_check_released(vk_escape),0);
    move=0;
}
else
{
    global.pause=1;
    //the up and down keys, or w and s, move the menu marker up and down
    //this subtracts 1 from move when 1 of the buttons is pressed
    move -= max(keyboard_check_pressed(vk_up),keyboard_check_pressed(ord("W")),0);
    //this adds 1 to move when 1 of the buttons is pressed
    move += max(keyboard_check_pressed(vk_down),keyboard_check_pressed(ord("S")),0);
    if (move != 0)
    {
        menu_position += move;
        //this if statement lets you scroll down off the menu to get to the top of the menu
        if (menu_position&lt;0) 
            menu_position = array_length_1d(menu) -1;
        //this does the same but in reverse
        if (menu_position&gt;array_length_1d(menu) -1) 
            menu_position = 0;
        move=0;
    }
    //enter or space selects something on the menu
    push = max(keyboard_check_released(vk_enter),keyboard_check_released(vk_space),0);
    if (push == 1) 
    {
        scr_pause_menu();
        //scr_pause_menu checks what the current menu position is
        //scripts have access to variables of the object that calls the script inheriently
    }
    if(max(keyboard_check_released(vk_escape),0))
    {
        menu_position=0;
        scr_pause_menu();
    }
    scr_pause_alarms();
    
    
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.pause)
{
    draw_set_color(c_black);
    draw_rectangle(
    view_xview[0],
    view_yview[0],
    view_xview[0]+view_wview[0],
    view_yview[0]+view_hview[0],
    false);
    draw_set_halign(fa_center);
    draw_set_font(font);
    draw_set_color(c_white);
    draw_text((view_xview[0]+view_wview[0]/2),(view_yview[0]+view_hview[0]/2)-64,"Game Paused");
    draw_set_halign(fa_left);
    for(i=0; i &lt; array_length_1d(menu); i += 1)
    {
        draw_text((view_xview[0]+view_wview[0]/2), (view_yview[0]+view_hview[0]/2) + (i * space), string(menu[i]));
    }
    draw_sprite(spr_pause_menu, 0, (view_xview[0]+view_wview[0]/2)-32, (view_yview[0]+view_hview[0]/2)+(menu_position * space));
    draw_set_color(c_black);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
