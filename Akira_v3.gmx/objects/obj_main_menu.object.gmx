<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_main_menu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Menu Options
menu[0]="Read the Signal";
menu[1]="Ignore the Signal";

//Menu Variables
menu_length=array_length_1d(menu);//This dynamically matches the amount of menu options
space = 32;//default spacing value used for drawing
menu_position=0;//default position
l=0; //Longest pixel width amongst menu options
//This is needed to determine how wide the menu should be.
for(i=0; i &lt; array_length_1d(menu); i += 1)
{
    if(string_width(string(menu[i]))&gt;l)
    {
        l=string_width(string(menu[i]));
    }
}

//Button variables

move = 0;
push = 0;
push_end = 0;

//dot dot dot
dots = 0;
dots_message = true;

//message read variable.
read=false;

//menu option variable
display=true;

//distress text
message="MESSAGE: THIS IS AN AUTOMATED DISTRESS SIGNAL
GENERATED BY THE U.S.F HOKKAIDO'S EMERGENCY SYSTEM.
WE REQUEST THAT ANYONE RECIEVING THIS MESSAGE
RESPOND AND ASSIST US.
WE ARE CURRENTLY LOCATED AT CRF:
4971-74983-60213
ORBITING:
EPSILON ERIDATI
THIS MESSAGE WILL NOW REPEAT..."
message_draw = ""; //this is what we 'write' out. It's blank right now
increase = 0.5; //the speed at which new characters are added
characters = 0; //how many characters have already been drawn
hold = 0; //skip ahead

message_length = string_length(message); //get the number of characters in the message

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(display==true)
{

//the up and down keys, or w and s, move the menu marker up and down
//this subtracts 1 from move when 1 of the buttons is pressed
    move -= max(keyboard_check_pressed(vk_up),keyboard_check_pressed(ord("W")),0);

//this adds 1 to move when 1 of the buttons is pressed
    move += max(keyboard_check_pressed(vk_down),keyboard_check_pressed(ord("S")),0);

    if (move != 0)
    {
        menu_position += move;
        //this if statement lets you scroll down off the menu to get to the top of the menu
        if (menu_position&lt;0) 
            menu_position = array_length_1d(menu) -1;
        //this does the same but in reverse
        if (menu_position&gt;array_length_1d(menu) -1) 
            menu_position = 0;
        move=0;
    }
//enter or space selects something on the menu
    push = max(keyboard_check_released(vk_enter),keyboard_check_released(vk_space),0);
    if (push == 1) 
    {
     scr_main_menu();
        //scr_main_menu checks what the current menu position is
        //scripts have access to variables of the object that calls the script inheriently
    }

}

if(dots_message==true)
{
    //dots
    dots+=0.1
    if(dots==4)
    {
        dots=0;
    }
}

if(read==true)
{
if (characters &lt; message_length) 
{ //if current character count is less than the amount in current message
    hold=keyboard_check(vk_anykey);
    characters += increase + (3 * hold);
    message_draw = string_copy(message, 0, characters); //copy string to current character
} 
else {
    display=true;
    }
}

push_end = max(keyboard_check_released(vk_escape),0)
if (push_end == 1) 
{
    game_end();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_font(font);
draw_set_color(c_white);

if(read==true)
{
    draw_text(x, space+room_height/3, message_draw); //draw the text at the coordinates
}

if(dots_message==true)
{
    if(dots&lt;1)
    {
        draw_text(x,space+room_height/3,"Incoming Distress Signal")
    }
    else if(dots&lt;2)
    {
        draw_text(x,space+room_height/3,"Incoming Distress Signal.")
    }
    else if(dots&lt;3)
    {
        draw_text(x,space+room_height/3,"Incoming Distress Signal..")
    }
    else if(dots&lt;4)
    {
        draw_text(x,space+room_height/3,"Incoming Distress Signal...")
    }
}
if(display==true)
{
    for(i=0; i &lt; array_length_1d(menu); i += 1)
    {
        draw_text(x +space, y + (i * space), string(menu[i]));
    }
    draw_sprite(sprite_index, 0, x, y+(menu_position * space));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
